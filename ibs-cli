#!/usr/bin/python
# -*- coding: utf-8 -*-

__version__ = '1.7'
__all__ = ['IbsCli']
__author__ = 'DoroWu'
__home_page__ = ''

import os
from os.path import join as pjoin
import sys
import getpass
import re
import logging
import logging.handlers
from argparse import ArgumentParser, SUPPRESS
import glob
import subprocess
import json
import time
import urllib2
import shutil
import mechanize
import cookielib
import ConfigParser
from HTMLParser import HTMLParser
from urllib import urlencode


import requests


#The terminal has 8 colors with codes from 0 to 7
BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)

#These are the sequences need to get colored ouput
RESET_SEQ = "\033[0m"
COLOR_SEQ = "\033[1;%dm"
BOLD_SEQ = "\033[1m"

#The background is set with 40 plus the number of the color,
#and the foreground with 30
COLORS = {
    'WARNING':  COLOR_SEQ % (30 + YELLOW) + 'WARNING' + RESET_SEQ,
    'INFO':     COLOR_SEQ % (30 + WHITE) + 'INFO' + RESET_SEQ,
    'DEBUG':    COLOR_SEQ % (30 + BLUE) + 'DEBUG' + RESET_SEQ,
    'CRITICAL': COLOR_SEQ % (30 + YELLOW) + 'CRITICAL' + RESET_SEQ,
    'ERROR':    COLOR_SEQ % (30 + RED) + 'ERROR' + RESET_SEQ,
}


class MLStripper(HTMLParser):
    def __init__(self):
        self.reset()
        self.fed = []

    def handle_data(self, d):
        self.fed.append(d)

    def get_data(self):
        return ''.join(self.fed)


class IbsConfigParser(object):
    '''
    User can get username and apikey of oem-ibs API from
    $HOME/.pes/config.txt.
    '''
    def __init__(self):
        self.set_ubuntusso_config()
        self.set_ibs_config()

    def set_ubuntusso_config(self):
        self.cfgparser = ConfigParser.RawConfigParser()
        self.cfgdir = '{}/.pes'.format(os.getenv('HOME'))
        self.cfg_ubuntusso = '{}/ubuntu-sso'.format(self.cfgdir)

        self.cfgparser.read(self.cfg_ubuntusso)
        if not self.cfgparser.has_section('auth'):
            self.cfgparser.add_section('auth')
            self.cfgparser.set('auth', 'email', '')
            self.cfgparser.set('auth', 'password', '')

            if not os.path.exists(self.cfgdir):
                os.makedirs(self.cfgdir)

            with open(self.cfg_ubuntusso, 'w') as configfile:
                self.cfgparser.write(configfile)

    def set_ibs_config(self):
        self.cfgparser = ConfigParser.RawConfigParser()
        self.cfgdir = '{}/.pes'.format(os.getenv('HOME'))
        self.cfg_ibscli = '{}/ibs-cli'.format(self.cfgdir)

        self.cfgparser.read(self.cfg_ibscli)
        if not self.cfgparser.has_section('auth'):
            self.cfgparser.add_section('auth')
            self.cfgparser.set('auth', 'username', '')
            self.cfgparser.set('auth', 'apikey', '')

            if not os.path.exists(self.cfgdir):
                os.makedirs(self.cfgdir)

            with open(self.cfg_ibscli, 'w') as configfile:
                self.cfgparser.write(configfile)

    @property
    def email(self):
        self.cfgparser.read(self.cfg_ubuntusso)
        return self.cfgparser.get('auth', 'email')

    @property
    def password(self):
        self.cfgparser.read(self.cfg_ubuntusso)
        return self.cfgparser.get('auth', 'password')

    @property
    def username(self):
        self.cfgparser.read(self.cfg_ibscli)
        return self.cfgparser.get('auth', 'username')

    @property
    def apikey(self):
        self.cfgparser.read(self.cfg_ibscli)
        return self.cfgparser.get('auth', 'apikey')


class IbsBrowser(mechanize.Browser):
    def __init__(self, config_dir, log_level, log_dir, autoauth):
        mechanize.Browser.__init__(self)
        self.config_dir = config_dir
        self.log_level = log_level
        self.log_dir = log_dir
        self.autoauth = autoauth

        br = self
        # XXX saving the cookie and dynamically prompting
        # for requisite informations
        # Cookie Jar
        br.set_cookiejar(self.cookie)

        # Browser options
        br.set_handle_equiv(True)
        br.set_handle_gzip(False)  # XXX messes up stdin
        br.set_handle_redirect(True)
        br.set_handle_referer(True)
        br.set_handle_robots(False)

        br.addheaders = [('User-agent',
                          'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:19.0) '
                          'Gecko/20100101 Firefox/19.0')]

        ## Want debugging messages?
        if self.log_level <= logging.DEBUG:
            br.set_debug_http(True)
            br.set_debug_redirects(True)
            br.set_debug_responses(True)
        # fetch once to update the session
        self.fetch_page('https://oem-share.canonical.com/oem/')

    @property
    def cookie(self):
        if hasattr(self, '_cookie'):
            return self._cookie
        self._cookie = cookielib.LWPCookieJar()
        if os.path.exists(os.path.join(self.config_dir, 'mycookie')):
            self._cookie.load(os.path.join(self.config_dir, 'mycookie'))
        return self.cookie

    @property
    def pysid(self):
        if hasattr(self, '_pysid'):
            return self._pysid
        return None

    def find_records(self, html):
        regex = re.compile('<tr><td.*<a href=["\']?([^"\']*)["\']?>'
                           '(.*)</a>.*</td></tr>')
        links = []
        for line in html.split('\n'):
            line.strip()
            #print line
            m = regex.match(line)
            if not m:
                continue
            #print 'bingo: {0}:{1}'.format(m.group(1), m.group(2))
            links.append((m.group(1), m.group(2)))
        return links

    def fetch_page(self, page_url):
        br = self
        logging.debug('open ' + page_url)
        r = br.open(page_url)
        html = r.read()

        try:
            br.select_form('oid_form')
            logging.debug('open oid_form')
            r = br.submit()
            html = r.read()
        except Exception:
            logging.debug('no oid_form')

        try:
            for form in br.forms():
                if 'openid_message' != form.attrs['id']:
                    continue
                br.form = form
                logging.debug('open openid_message')
                r = br.submit()
                html = r.read()
                break
            else:
                pass
        except Exception:
            logging.debug('no openid_message')

        try:
            br.select_form(name='loginform')
            if self.autoauth is True:
                cfgparser = IbsConfigParser()
                br['email'] = cfgparser.email
                br['password'] = cfgparser.password
                logging.debug('email: {}'.format(br['email']))
                logging.debug('password: {}'.format(br['password']))
            else:
                br['email'] = raw_input('email: ')
                br['password'] = getpass.getpass()
            logging.debug('open loginform')
            r = br.submit()
            html = r.read()
        except Exception:
            logging.debug('no loginform')

        try:
            br.select_form(name='loginform')
            logging.debug('open loginform for 2-factor')
            if self.autoauth is True:
                try:
                    br['oath_token'] = subprocess.check_output('2fa')
                except OSError:  # 2fa package is not installed
                    br['oath_token'] = getpass.getpass('2-factor token: ')
                logging.debug('oath_token: {}'.format(br['oath_token']))
            else:
                br['oath_token'] = getpass.getpass('2-factor token: ')
            logging.debug('input oath_token')
            r = br.submit()
            html = r.read()
        except Exception:
            logging.debug('no loginform for 2-factor')

        try:
            br.select_form(name='decideform')
            logging.debug('open decideform')
            r = br.submit()
            html = r.read()
        except Exception:
            logging.debug('no decideform')

        try:
            if br.title().find('in progress') != -1:
                logging.debug('in progress')
                br.select_form(nr=0)
                r = br.submit()
                html = r.read()
        except Exception as e:
            logging.debug('no in progress exception: ' + str(e))

        # check last page is not a loginform
        has_last_loginform = False
        try:
            br.select_form(name='loginform')
            has_last_loginform = True
        except Exception:
            # pass
            logging.debug('last loginform check: no')
        if has_last_loginform:
            raise PermissionDenied()

        if self.log_level <= logging.DEBUG:
            with open(pjoin(self.log_dir, 'ibs-cli.html'), 'wb+') as f:
                f.write(html)
        self.cookie.save(pjoin(self.config_dir, 'mycookie'),
                         ignore_discard=True)
        self.update_pysid()
        return html

    def update_pysid(self):
        if hasattr(self, '_pysid'):
            return
        cookie_str = None
        cookie_file = os.path.join(self.config_dir, 'mycookie')
        with open(cookie_file, 'r') as f:
            for line in f:
                loc_pysid = line.find('pysid=')
                if loc_pysid < 0:
                    continue
                loc_pysid_end = line.find(';', loc_pysid)
                if loc_pysid_end < 0:
                    continue
                cookie_str = line[loc_pysid:loc_pysid_end]
                self._pysid = cookie_str
                break


class IbsProject(object):
    oem_ibs_url = 'https://oem-ibs.canonical.com/'
    oem_share_url = 'https://oem-share.canonical.com/oem/cesg-builds/'

    def __init__(self, ibsbrowser, project_name):
        if not project_name:
            logging.critical('No project name provided (-p proj_name)')
            raise ValueError('No project name provided (-p proj_name)')
        self.project_name = project_name
        self.ibsbrowser = ibsbrowser

    def latest_complete_build(self):
        payload = {
            'project': self.project_name,
            'result': 'COMPLETED',
            'order_by': '-finished_at',
            'format': 'json',
            'limit': '1'
        }
        response = requests.get(
            self.oem_ibs_url + 'api/v1/buildresults/',
            cookies=self.ibsbrowser.cookie,
            params=payload
        )
        try:
            objs = json.loads(response.content)
        except ValueError:
            logging.critical('Do not get correct response from server.')
            logging.critical('Please check your cookie file.')
            logging.critical('Request status: {}'.format(response.status_code))
            raise
        [logging.debug('{0} ({1})'.format(i['name'], i['id']))
         for i in objs['objects']]
        if len(objs['objects']) <= 0:
            logging.critical('No complete build of project:%s' %
                             self.project_name)
        return objs['objects'].pop(0)

    def latest_complete_build_id(self):
        return self.latest_complete_build()['id']

    def latest_complete_build_number(self):
        return self.latest_complete_build()['name']

    def download(self, build_number=None, no_image=False, zsync_file=None):
        def chunk_report(bytes_so_far, chunk_size, total_size):
            percent = float(bytes_so_far) / total_size
            percent = round(percent * 100, 2)
            sys.stdout.write("Downloaded {0} of {1} bytes ({2:.2f})\r".format(
                             bytes_so_far, total_size, percent))

            if bytes_so_far >= total_size:
                sys.stdout.write('\n')

        def chunk_read(response, f, chunk_size=8192, report_hook=None):
            total_size = response.info().getheader('Content-Length').strip()
            total_size = int(total_size)
            bytes_so_far = 0

            while 1:
                chunk = response.read(chunk_size)
                bytes_so_far += len(chunk)

                if not chunk:
                    break
                f.write(chunk)

                if report_hook:
                    report_hook(bytes_so_far, chunk_size, total_size)

            return bytes_so_far

        def download_all(base_path, base_url, url):
            def zsync():
                if zsync_file is None:
                    return False
                compare_link = link[0] + '.zsync'
                for link_check in self.ibsbrowser.find_records(html)[1:]:
                    if link_check[0] == compare_link:
                        logging.info('Trying download via zsync...')
                        download_one_zsync(base_path,
                                           base_url,
                                           url + link[0])
                        break
                else:
                    logging.info('No zsync file or error '
                                 'during process: ' + url + link[0])
                return True

            def rsync():
                return download_one_rsync(base_path, base_url, url + link[0])

            logging.info('Open dir {0}'.format(url))
            try:
                r = self.ibsbrowser.open(base_url + url)
            except Exception as e:
                logging.debug('browser.open: ' + str(e))
                return
            try:
                html = r.read()
                for link in self.ibsbrowser.find_records(html)[1:]:
                    if any(link[0].endswith(x) for x in ('.iso.zsync',
                                                         '.img.zsync')):
                        continue
                    if link[0][-1] == '/':
                        download_all(base_path, base_url, url + link[0])
                        continue
                    if any(link[0].endswith(x) for x in ('.iso', '.img')):
                        if zsync():
                            continue
                        if rsync():
                            continue
                    download_one(base_path, base_url, url + link[0])
            except IndexError:
                pass

        def download_one(base_path, base_url, url, not_download=False,
                         ifile=False):
            logging.debug('Open file {0}'.format(url))

            filename = os.path.join(base_path, url.replace('/', os.sep))
            if url.find('/') != -1:
                dirname = os.path.dirname(filename)
                if not os.path.exists(dirname):
                    logging.debug('Create dir: ' + dirname)
                    os.makedirs(dirname)
            if ifile:
                try:
                    logging.debug('Copy file from {0} to {1}'.format(
                        ifile, filename))
                    shutil.copyfile(ifile, filename)
                except Exception as e:
                    logging.warn('Failed to copy from {0} to {1}: {2}'.format(
                        ifile, filename, e))
            if not_download:
                return filename

            logging.info('Download {0}'.format(url))
            try:
                r = self.ibsbrowser.open(base_url + url)
                with open(filename, 'wb+') as f:
                    chunk_read(r, f, report_hook=chunk_report)
            except Exception as e:
                logging.warn('Failed to download {0}{1}: {2}'.format(base_url,
                                                                     url, e))

        def download_one_rsync(base_path, base_url, url):
            if not os.path.exists('/usr/bin/rsync'):
                logging.debug('No rsync found in /usr/bin. Revert')
                return False
            logging.debug('fork rsync process for {0}'.format(url))
            # infile
            ifile = ''
            files = glob.glob(os.path.join(base_path, '..', '..', '*', '*',
                                           'images', '*', '*.iso'))
            if len(files) <= 0:
                files = glob.glob(os.path.join(base_path, '..', '..', '*', '*',
                                               'images', '*', '*.img'))
            path_prefix = os.path.join(base_path, '..', '..')
            biggest = 0
            for file in files:
                logging.debug('file 1: ' + file)
                file_no_prefix = file[len(path_prefix) + 1:]
                logging.debug('file 2: ' + file_no_prefix)
                file_list = file_no_prefix.split(os.sep)
                logging.debug('pair: ' + str((file_list[0], file_list[1])))
                t = int(file_list[0] + file_list[1])
                if t > biggest:
                    biggest = t
                    ifile = file
            if not ifile:
                logging.debug('No reference file found. Revert')
                return False
            # outfile
            ofile = download_one(base_path, base_url, url, True, ifile)
            # Assuming username and ssh key has been setup in .ssh/config
            rsync_url = base_url.replace('https://oem-share.canonical.com',
                                         'oem-share.canonical.com:/srv/'
                                         'oem-share.canonical.com/www') + url
            cmd = 'rsync -Pv {url} {ofile}'.format(url=rsync_url, ofile=ofile)
            logging.info('Start rsync process')
            logging.debug('Run command: ' + cmd)
            result = subprocess.call(cmd, shell=True)
            logging.debug('Command result: ' + str(result))
            if result != 0:
                logging.warn('rsync failed with result ' + str(result))
                return False
            return True

        def download_one_zsync(base_path, base_url, url):
            if not os.path.exists('/usr/bin/zsync_curl'):
                logging.error('No zsync_curl found in /usr/bin. Revert')
                return False
            logging.debug('fork zsync process for {0}'.format(url))
            # cookie
            if self.ibsbrowser.pysid is None:
                logging.error('No cookie pysid found. Revert')
                return False
            cookie_str = self.ibsbrowser.pysid
            ifile = ''
            if zsync_file:
                ifile = zsync_file
            else:
                files = glob.glob(pjoin(base_path, '..', '..', '*', '*',
                                        'images', '*', '*.iso'))
                if len(files) <= 0:
                    files = glob.glob(pjoin(base_path, '..', '..', '*',
                                            '*', 'images', '*', '*.img'))
                path_prefix = pjoin(base_path, '..', '..')
                biggest = 0
                for file in files:
                    logging.debug('file 1: ' + file)
                    file_no_prefix = file[len(path_prefix) + 1:]
                    logging.debug('file 2: ' + file_no_prefix)
                    file_list = file_no_prefix.split(os.sep)
                    logging.debug('pair: ' + str((file_list[0], file_list[1])))
                    t = int(file_list[0] + file_list[1])
                    if t > biggest:
                        biggest = t
                        ifile = file
            if not ifile:
                logging.error('No reference file found. Revert')
                return False
            # outfile
            ofile = download_one(base_path, base_url, url, True)
            cmd = 'zsync_curl -c {cookie} {url} -i {ifile} -o {ofile}'.format(
                  cookie=cookie_str,
                  url=base_url + url + '.zsync',
                  ifile=ifile,
                  ofile=ofile)
            logging.info('Start zsync process')
            logging.debug('Run command: ' + cmd)
            result = subprocess.call(cmd, shell=True)
            logging.debug('Command result: ' + str(result))
            if result != 0:
                logging.error('zsync failed with result ' + str(result))
                return False
            return True

        if not build_number:
            build_number = self.latest_complete_build_number()
        date, nr_in_date = build_number.split('-')
        build_url = (self.oem_share_url + '{0}/{1}/{2}/').format(self.project_name, date, nr_in_date)
        #urls_to_fetch = ('build-log.txt', 'config/manifest.html')
        #urls_to_fetch = ('build-log.txt', 'config/acubens.manifest',
        #                 'images/usb-hdd/')
        urls_to_fetch = ['build-log.txt', 'config/manifest.html',
                         'config/acubens.manifest', 'config.tgz']
        #urls_to_fetch = ('images/iso/',)
        if not no_image:
            urls_to_fetch.extend(['images/iso/', 'images/usb-hdd/'])

        path_to_store = pjoin('download', self.project_name,
                              date,
                              nr_in_date)
        if not os.path.exists(path_to_store):
            print 'Create dir: ' + path_to_store
            os.makedirs(path_to_store)

        for url in urls_to_fetch:
            if url[-1] == ('/'):
                download_all(path_to_store, build_url, url)
            else:
                download_one(path_to_store, build_url, url)

    def monitor_project_build(self, project_name):
        """ Monitor status change of specified build of project
        """
        pass

    def build(self):
        build_url = (self.oem_ibs_url + 'projects/{0}/+build').format(self.project_name)
        self.ibsbrowser.fetch_page(build_url)

    def project_status(self):
        page_url = 'https://oem-ibs.canonical.com/projects/{0}/'.format(
                   self.project_name)
        html = self.ibsbrowser.fetch_page(page_url)
        #with open('p3.html', 'wb+') as f:
        #with open('p3.html', 'r') as f:
        #    f.write(html)
        #    html = f.read()
        loc = html.find('<dt>Build Status:')
        if loc < 0:
            return ''
        loc = html.find('<dd>', loc)
        loc_end = html.find('</dd>', loc)
        if loc < 0 or loc_end < 0:
            return ''
        return html[loc + 4:loc_end]


class IbsCli(object):
    def __init__(self, args, extra_args):
        self._args = args
        self._extra_args = extra_args

    @property
    def proj_name(self):
        if not self._args.proj_name:
            logging.critical('No project name provided (-p proj_name)')
            raise ValueError('No project name provided (-p proj_name)')
        return self._args.proj_name

    @property
    def browser(self):
        if hasattr(self, '_br'):
            return self._br
        br = self._br = IbsBrowser(self._args.config_dir,
                                   self._args.log_level,
                                   self._args.log_dir,
                                   self._args.autoauth)
        return self._br

    def act_list_projects(self):
        page_url = 'https://oem-ibs.canonical.com/'
        html = self.browser.fetch_page(page_url + 'projects/')
        #with open('p1.html', 'wb+') as f:
        #with open('p1.html', 'r') as f:
        #    #f.write(html)
        #    html = f.read()
        projects_regex = re.compile('<a href="/projects/(.+)/">(.+)</a>',
                                    re.MULTILINE)
        logging.info('  {0:40}   {1}'.format('[Codename]', '[Title]'))
        for p in projects_regex.finditer(html):
            logging.info('- {0:40} - {1}'.format(p.group(1), p.group(2)))

    def act_list_builds(self):
        page_url = 'https://oem-ibs.canonical.com/builds/+api/{0}/'.format(
                   self.proj_name)
        html = self.browser.fetch_page(page_url)
        logging.info('  {0:15}   {1:20}   {2:20}   {3}'.format(
                     '[build name]', '[start]', '[finish]', '[result]'))
        for r in json.loads(html):
            logging.info('- {0:15} - {1:20s} - {2:20s} - {3}'.format(
                         r['name'],
                         r['started_at'],
                         r['finished_at'],
                         r['result']))

    def act_build(self):
        project = IbsProject(self.browser, self.proj_name)
        project.build()
        logging.info('{0} - {1}'.format(self.proj_name,
                                        project.project_status()))

    def act_download(self):
        """ Download
        """

        logging.info('Downloading...')
        IbsProject(self.browser, self.proj_name).download(self._args.build_name, self._args.no_image, self._args.zsync_file)

    def act_monitor(self):
        def strip_tags(html):
            s = MLStripper()
            s.feed(html)
            return s.get_data()

        project = IbsProject(self.browser, self.proj_name)
        result = None
        while True:
            try:
                tmp = project.project_status()
                if len(tmp) != 0:
                    if tmp != result:
                        text = strip_tags(tmp).strip()
                        logging.info('{0} - {1}'.format(
                                     self.proj_name, text))
                        if self._args.osd:
                            cmd = 'notify-send "IBS - {0}" "{1}"'.format(
                                  self.proj_name, text)
                            subprocess.call(cmd, shell=True)
                        result = tmp
                        if result.split(' ')[0] == 'COMPLETED':
                            break
                else:
                    logging.debug('No status got')
                time.sleep(10)
            except urllib2.URLError:
                logging.debug('URLError when act_monitor')

    def act_version(self):
        print __version__

    def act_add(self):
        # ./ibs-cli -a "name=dell-bto-precise-fish-init-test-4\
        #&title=Dell precise fish-init-test 3&project_group=So\
        #merville&arch=amd64&series=precise&launchpad_project=\
        #&status=devel&config_url=lp:~oem-solutions-engineers/\
        #bugsy-config/dell-bto-precise-fish-init-test&notes=" add

        args = self._args.add_project_args
        kvs = dict()
        for arg in args.split('&'):
            k, v = arg.split('=', 2)
            kvs[k] = v
        page_url = 'https://oem-ibs.canonical.com/projects/+add/'
        html = self.browser.fetch_page(page_url)
        with open('add-test.html', 'wb+') as f:
            f.write(html)
        br = self.browser
        #logging.info(str(br.forms()))
        #br.form = br.forms().next()
        br.select_form(nr=0)
        logging.info(str(br.form))
        for k in kvs:
            logging.debug('set parameters: {}={}'.format(k, kvs[k]))
            if isinstance(br.form.find_control(k), mechanize.ListControl):
                br[k] = (kvs[k],)
            else:
                br[k] = kvs[k]
        r = br.submit()
        html = r.read()
        with open('add-test-submited.html', 'wb+') as f:
            f.write(html)
        #br['id_title'] = 'Dell precise '
        #br['id_project_group'] = 'Somerville'
        #br['id_arch'] = 'amd64'
        #br['id_series'] = 'precise'
        #br['id_config_url'] = 'Dell precise '

    def act_login(self):
        page_url = 'https://oem-ibs.canonical.com/'
        try:
            self.browser.fetch_page(page_url + 'builders/')
        except PermissionDenied:
            sys.exit(1)
        sys.exit(0)

    def get_authenticated_url(self, url, params=None):
        cfgparser = IbsConfigParser()
        base_params = {
            "username": cfgparser.username,
            "api_key": cfgparser.apikey
        }
        logging.debug('username: ' + cfgparser.username)
        logging.debug('api_key: ' + cfgparser.apikey)
        base_params.update(params or [])
        return "%s?%s" % (url, urlencode(base_params))

    def act_release(self):
        '''
        Release the latest successful build of a specific project.
        '''
        build_id = IbsProject(self.browser, self.proj_name).latest_complete_build_id()
        logging.debug('latest build id: {}'.format(build_id))

        cfgparser = IbsConfigParser()

        headers = {'Content-Type': 'application/json'}
        data = {
            'build': '/api/v1/buildresults/{}/'.format(build_id),
            'name': self._args.release_name,
            'notes': self._args.release_notes,
            'tag': 'GM'
        }
        logging.debug(data.viewitems())

        response = requests.post(
            self.get_authenticated_url(
                'https://oem-ibs.canonical.com/api/v1/releases/',
                #cfgparser.username,
                #cfgparser.apikey
            ),
            data=json.dumps(data),
            headers=headers
        )
        return response.status_code

    def run(self):
        action_fns = {'list-projects': self.act_list_projects,
                      'list-builds': self.act_list_builds,
                      'build': self.act_build,
                      'download': self.act_download,
                      'monitor': self.act_monitor,
                      'version': self.act_version,
                      'login': self.act_login,
                      'add': self.act_add,
                      'release': self.act_release}
        if not os.path.exists(self._args.config_dir):
            os.makedirs(self._args.config_dir)
        if len(self._extra_args) > 0:
            action_fns[self._args.action](self._extra_args)
        else:
            action_fns[self._args.action]()


class PermissionDenied(Exception):
    pass


class ColoredFormatter(logging.Formatter):
    def __init__(self, msg, use_color=True):
        logging.Formatter.__init__(self, msg)
        self.use_color = use_color

    def format(self, record):
        if self.use_color:
            record.levelname = COLORS.get(record.levelname, record.levelname)
        return logging.Formatter.format(self, record)


class LoggingConfiguration(object):
    COLOR_FORMAT = "[" + BOLD_SEQ + "%(asctime)s" + RESET_SEQ + \
                   "][%(levelname)s] %(message)s (" + BOLD_SEQ + \
                   "%(filename)s" + RESET_SEQ + ":%(lineno)d)"
    NO_COLOR_FORMAT = "[%(asctime)s][%(levelname)s] %(message)s " \
                      "(%(filename)s:%(lineno)d)"

    @classmethod
    def set(cls, log_level, log_filename, append):
        """ Configure a rotating file logging
        """
        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)

        # Log to sys.stderr using log level passed through command line
        if log_level != logging.NOTSET:
            log_handler = logging.StreamHandler(sys.stdout)
            if sys.platform.find('linux') >= 0:
                formatter = ColoredFormatter(cls.COLOR_FORMAT)
            else:
                formatter = ColoredFormatter(cls.NO_COLOR_FORMAT, False)
            log_handler.setFormatter(formatter)
            log_handler.setLevel(log_level)
            logger.addHandler(log_handler)

        # Log to rotating file using DEBUG log level
        log_handler = logging.handlers.RotatingFileHandler(log_filename,
                                                           mode='a+',
                                                           backupCount=3)
        formatter = logging.Formatter('%(asctime)s %(levelname)-8s '
                                      '%(message)s')
        log_handler.setFormatter(formatter)
        log_handler.setLevel(logging.DEBUG)
        logger.addHandler(log_handler)

        if not append:
            # Create a new log file on every new
            # (i.e. not scheduled) invocation
            log_handler.doRollover()


class MyArgumentParser(object):
    """Command-line argument parser
    """
    def __init__(self):
        """Create parser object
        """
        description = ('IBS command line interface. '
                       '')

        epilog = ('')
        parser = ArgumentParser(description=description, epilog=epilog)
        log_levels = ['notset', 'debug', 'info',
                      'warning', 'error', 'critical']
        parser.add_argument('--log-level', dest='log_level_str',
                            default='info', choices=log_levels,
                            help=('Log level. '
                                  'One of {0} or {1} (%(default)s by default)'
                                  .format(', '.join(log_levels[:-1]),
                                          log_levels[-1])))
        parser.add_argument('--log-dir', dest='log_dir', default='/tmp/',
                            help=('Path to the directory to store log files'))
        parser.add_argument('-p', '--project', dest='proj_name',
                            help=('codename such as '
                                  'dell-bto-precise-palm-beach-mlk-precise'))
        parser.add_argument('-b', dest='build_name',
                            help=('build name such as 20130412-0'))
        parser.add_argument('-z', '--zsync-input', dest='zsync_file',
                            default=None,
                            help=('file path of zsync input path'))
        parser.add_argument('--config-dir', dest='config_dir',
                            default=os.path.join(os.path.expanduser('~'),
                                                 '.config', 'ibs-cli'),
                            help=SUPPRESS)
        parser.add_argument('-g', '--osd', action='store_true', dest="osd",
                            default=False,
                            help=('show OSD notify during monitor'))
        parser.add_argument('--no-download-image', action='store_true',
                            dest="no_image", default=False,
                            help=('Not to download image'))
        parser.add_argument('--release-name',
                            default='',
                            help=('Name of a release'))
        parser.add_argument('--release-notes',
                            default='',
                            help=('Notes of a release'))
        parser.add_argument('--autoauth', action='store_true',
                            default=False,
                            help=('Use pre-configured information for '
                                  'authentication'))
        #parser.add_argument('-a', '--add-project-args',
        #dest="add_project_args",
        #                    default='',
        #                    help=('arguments for adding project. It may be'
        #                          'name=dell-bto-precise-fish-init-test&'
        #                          'title=Dell precise fish-init-test&'
        #                          'project_group=Somerville&'
        #                          'arch=amd64&'
        #                          'series=precise&'
        #                          'config_url=lp:~oem-solutions-engineers/bugsy-config/dell-bto-precise-titan'))
        actions = ['list-projects', 'list-builds', 'build', 'download',
                   'monitor', 'version', 'login', 'release']
        parser.add_argument('action', choices=actions,
                            default='check',
                            help=('Action is one of {0}'.
                                  format(', '.join(actions))))
        # Append to log on subsequent startups
        parser.add_argument('--append', action='store_true',
                            default=False, help=SUPPRESS)

        self.parser = parser

    def parse(self):
        """Parse command-line arguments
        """
        args, extra_args = self.parser.parse_known_args()
        args.log_level = getattr(logging, args.log_level_str.upper())

        # Log filename shows clearly the type of test (pm_operation)
        # and the times it was repeated (repetitions)
        args.log_filename = os.path.join(
            args.log_dir,
            ('{0}.log'.format(os.path.basename(__file__)))
        )
        return args, extra_args


def main():
    args, extra_args = MyArgumentParser().parse()

    LoggingConfiguration.set(args.log_level, args.log_filename, args.append)
    logging.debug('Arguments: {0!r}'.format(args))
    logging.debug('Extra Arguments: {0!r}'.format(extra_args))

    try:
        IbsCli(args, extra_args).run()
    except PermissionDenied:
        logging.critical('Permission Denied (email, password or 2FA token'
                         'error)')
    except KeyboardInterrupt:
        logging.info('^c')


if __name__ == '__main__':
    main()
